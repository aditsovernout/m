# Import required libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, confusion_matrix, accuracy_score


# Load the dataset
df = pd.read_csv('emails.csv')

# Split the dataset into features and labels
X = df.drop(columns=['Email No.', 'Prediction'])  # Features (drop non-relevant columns)
y = df['Prediction']  # Labels (0 - Not Spam, 1 - Spam)

# Check for missing values and drop if any
df = df.dropna()

# 2. Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

# Standardize the feature set for both KNN and SVM
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Loop until a valid integer is entered
while True:
    try:
        k = int(input("Enter the value of k for K-Nearest Neighbors: "))
        break  # Exit loop if input is valid
    except ValueError:
        print("Invalid input. Please enter an integer value for k.")


# Initialize KNN classifier with the user-defined k value
knn = KNeighborsClassifier(n_neighbors=k)

# Train the KNN model
knn.fit(X_train, y_train)

# Predict using KNN
y_pred_knn = knn.predict(X_test)

# Evaluate the KNN model
print("\nKNN Model Performance:")
print("KNN Accuracy:", accuracy_score(y_test, y_pred_knn))
print("KNN R²:", r2_score(y_test, y_pred_knn))
print("KNN MSE:", mean_squared_error(y_test, y_pred_knn))
print("KNN RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_knn)))
print("KNN MAE:", mean_absolute_error(y_test, y_pred_knn))
print("KNN Confusion Matrix:\n", confusion_matrix(y_test, y_pred_knn))


### SUPPORT VECTOR MACHINE (SVM) ###

# Initialize SVM classifier
svm = SVC(kernel='linear')

# Train the SVM model
svm.fit(X_train, y_train)

# Predict using SVM
y_pred_svm = svm.predict(X_test)

# Evaluate the SVM model
print("\nSVM Model Performance:")
print("SVM Accuracy:", accuracy_score(y_test, y_pred_svm))
print("SVM R²:", r2_score(y_test, y_pred_svm))
print("SVM MSE:", mean_squared_error(y_test, y_pred_svm))
print("SVM RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_svm)))
print("SVM MAE:", mean_absolute_error(y_test, y_pred_svm))
print("SVM Confusion Matrix:\n", confusion_matrix(y_test, y_pred_svm))

